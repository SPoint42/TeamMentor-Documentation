<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-318174933" Content_Hash="-1660459033">
  <Metadata>
    <Id>bf418d65-90af-47f9-a868-5ca605aff024</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>Dynamic Queries That Accept User Input Are Used Only If Stored Procedures Cannot Be Used</Title>
    <Category>Data Access</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Checklist Item</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1><p>Check to ensure that your application avoids constructing SQL queries in code that include user input. Make sure that it uses parameterized stored procedures that use type safe SQL parameters. </p><h1>Why</h1><p>If you construct queries dynamically using user input, your code is susceptible to SQL injection. </p><br><h1>How to Fix</h1><p>For example, avoid the following style of code.</p>
<pre>// Use dynamic SQLSqlDataAdapter<br> myCommand = new SqlDataAdapter(<br>         "SELECT au_lname, au_fname FROM authors WHERE au_id = '" +<br>          SSN.Text + "'", myConnection);  </pre><br><p>If a malicious user supplies "' ; DROP DATABASE pubs --'" for the SSN.Text field, the code inserts the user's malicious input and generates the following query:</p>
<pre>SELECT au_lname, au_fname FROM authors WHERE au_id = ''; DROP DATABASE pubs --'  </pre><br><p>The ; (semicolon) character tells SQL that this is the end of the current statement, which is then followed by the malicious SQL code, which in this example drops the authors table.</p><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>