<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1040823223" Content_Hash="-186093094">
  <Metadata>
    <Id>7d576466-a454-4cc1-838b-06e1359f53f8</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>Session Cookies Are Protected</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1><p>Ensure that the confidentiality of session cookies is protected.</p><h1>Why</h1><p>Session cookies are used by an application to identify the session associated with a particular user. Protecting session cookies can help prevent an attacker from hijacking the session and using the application posing as a legitimate user.</p><h1>How to Check</h1><p>Use the following steps to verify that your application's session cookies are handled securely:</p><ol><li><p><strong>Verify that session identifiers cannot be guessed. </strong>Ensure that your application's session identifiers cannot be guessed by an attacker. Verify that your application's session IDs meet the following requirements:</p><ul><li><strong>Length</strong>: Your application uses long session identifiers (e.g. string of length 32). </li><li><strong>Triviality</strong>: Your application uses randomly generated session identifiers. </li><li><strong>Lifetime</strong>: Your application uses <strong>HttpSession.setMaxInactiveInterval</strong> to expire inactive sessions. </li><li><strong>Recycling</strong>: Your application does not reuse previously used sessions.</li></ul></li><li><p><strong>Verify that users can invalidate their own sessions. </strong>Ensure that your application uses <strong>HttpSession.invalidate</strong> to allow its users to invalidate their own sessions.</p></li><li><p><strong>Verify that session cookies are sent over encrypted channels. </strong>Ensure your application transmits session cookies over encrypted channels. Although this is not required for non-sensitive transactions, it is mandatory for any transactions are sensitive in nature.</p></li></ol><h1>Problem Example</h1><p>The following code shows the logout function of the <strong>LoginModule</strong> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session but fails to invalidate the session. </p><br><blockquote><pre>public boolean logout() throws LoginException<br>{<br>      subject.getPrincipals().remove(userToken);<br>      succeeded = false;<br>      commitSucceeded = false;<br>      clearCredentials();<br>      userToken = null;<br>       // The application should have invalidated the session here.<br>       // Log the logout event. Consult the Logging section for more details<br>      return true;<br>}</pre></blockquote><h1>Additional Resources</h1><ul><li>To learn more about session prediction attacks, see: <a href="http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml">Credential and Session Prediction</a>.</li></ul><h1>Related Guideline</h1><ul><li><a href="F0E2BFFC-E6D1-4DC6-A6C2-D078F54AE10E">Guideline: Protect Session Cookies (Java Web Application)</a> </li></ul>]]></Data>
  </Content>
</TeamMentor_Article>