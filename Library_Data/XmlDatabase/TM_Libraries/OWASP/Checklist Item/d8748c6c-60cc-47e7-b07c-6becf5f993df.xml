<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1626329431" Content_Hash="-42739680">
  <Metadata>
    <Id>d8748c6c-60cc-47e7-b07c-6becf5f993df</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>Inactive User Accounts Are Automatically Locked</Title>
    <Category>Authorization</Category>
    <Phase>Design</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1><p>Ensure the application automatically locks inactive user accounts. Verify that all instances of locking inactive accounts are logged.</p><h1>Why</h1><p>Inactive user accounts increase the attack surface of the application and can be used by an attacker as a means of entry.</p><h1>How to Check</h1><p>Follow these steps during the design phase to make sure your application has the capability to lock its inactive user accounts:</p><ol><li><p><strong>Verify your application stores the user's last login/inactivity information. </strong>Check if your application has the necessary procedures in place to store and retrieve last login and lockout information about its users. Common locations for storing such information are:</p><ul><li>Database that stores user account information </li><li>Data structures (e.g. Java class) that represent user accounts </li><li>Routines that handle user login </li><li>Routines that retrieve and update user account information</li></ul></li><li><p><strong>Verify your application has a lockout policy. </strong>An account lockout policy is typically application specific. Review your application's requirements and design specifications. Check for the following functionality:</p><ul><li>A mechanism for determining user inactivity </li><li>A mechanism for locking inactive accounts </li><li>A mechanism for unlocking disabled accounts </li><li>Verify that the last-login timestamp is reset to the current timestamp upon a successful authentication attempt</li></ul></li><li><p><strong>Verify the lockout policy is enforced by default. </strong>Make sure the functionality that enforces the lockout policy is enabled by default during deployment. </p><ul><li>Ensure that only users with administrative privileges can amend your application's lockout policy. </li><li>Verify that all instances of modifying the lockout policy are logged. </li><li>Check the following locations in the code to determine if the lockout policy is fully enforced: <ul><li>Account administration routines </li><li>Background database processes that perform user account maintenance </li><li>Authentication routines</li></ul></li></ul></li></ol><h1>Problem Example</h1><p>The following segment illustrates the user database of a multi-user application. In its current state, the application logs the last time the user has logged in but does not enforce a lockout policy for its inactive users; therefore, an attacker can gain unauthorized access to the application by compromising an inactive account.</p><pre>sql&gt; select username, locked, last_login_date from users;<br>+----------+--------+-----------------+<br>| username | locked | last_login_date |<br>+----------+--------+-----------------+<br>| adam     |      0 |      2006-10-11 |<br>| sue      |      0 |      2006-10-11 |<br>| jim      |      0 |      2006-10-01 |<br>| richard  |      0 |      2006-10-01 |<br>| julie    |      0 |      2006-09-23 |<br>| sam      |      0 |      2006-06-23 |<br>+----------+--------+-----------------+</pre><h1>Related Guideline</h1><ul><li><a href="45CAB29F-B502-4524-B054-D507AD601748">Guideline: Automatically Lock Inactive User Accounts (Java Web Application)</a> </li></ul>]]></Data>
  </Content>
</TeamMentor_Article>