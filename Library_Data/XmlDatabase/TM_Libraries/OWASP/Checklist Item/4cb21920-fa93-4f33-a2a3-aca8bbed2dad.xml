<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-175160663" Content_Hash="1533708857">
  <Metadata>
    <Id>4cb21920-fa93-4f33-a2a3-aca8bbed2dad</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>Input Is Validated for Length, Range, Format And Type</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1><p>Check that all input is validated and treated as untrusted data. Ensure data is validated using whitelisting techniques to check against known good input.</p><h1>Why</h1><p>Unchecked malicious input may lead to integer overflows, injection based attacks, denial of service or information disclosure.</p><h1>How to Check</h1><p>To check for this problem, use the following steps: </p><ol><li><p><strong>Find all input sources. </strong>During design time identify all of the potential input sources to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps. The most common sources are:</p><ul><li>URL based parameters </li><li>Form based parameters </li><li>Hidden fields </li><li>Cookies </li><li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) </li><li>Local filesystem </li><li>Database </li><li>Other services running on the system </li><li>Javascript variables </li><li>File upload and attributes (filename, size, data, etc) </li><li>DNS results or host names </li><li>External component call return values (COM, AJAX, ActiveX)</li></ul></li><li><p><strong>Trace data from source to sink. </strong>Trace each source of input through your application until you find its ultimate destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database. </p></li><li><p><strong>Identify validation routines. </strong>Each input source should have a data validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.</p></li><li><p><strong>Ensure quality of validation routines. </strong>Validation routines should check for length, range, format and type. </p><ul><li>Validation routines should check for known good data and constrain input against each of those four categories. </li><li>In web applications, look for application-supplied validators, such as a Custom Java Validator, to validate and constrain input after it is received from an input source. </li><li>Ensure that all numeric fields are validated for type and range. Check for the use of regular expressions and <strong>java.util.regex</strong> or the use of a validator that checks numeric ranges by converting the input value to an integer or double and then performing a range check. </li><li>Check that validators validate input against the least permissive expression possible that will accept all the input expected for that field. </li><li>If you know that the field will have certain internal structure, ensure that is checked for. </li><li>If the input has an internal checksum, like a credit card number, ensure that is checked. <br><br>Validation should check first for known valid, safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data, as it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed. </li></ul></li></ol><blockquote><p><strong>Options for Constraining and Sanitizing Data</strong></p><table><tbody><tr><th>Requirement</th><th>Options</th></tr><tr><td>Type checks</td><td>Regular expressions (<strong>java.util.regex</strong>) <p>Java type system</p></td></tr><tr><td>Length checks</td><td>Regular expressions (<strong>java.util.regex</strong>) <p><strong>String.length()</strong> method</p><p>Custom Java <strong>Validator</strong></p></td></tr><tr><td>Format checks</td><td>Regular expressions for pattern matching (<strong>Pattern</strong>, <strong>Matcher</strong>) <p>Java type system</p></td></tr><tr><td>Range checks</td><td>Custom Java <strong>Validator</strong> <p>Typed data comparisons</p></td></tr></tbody></table></blockquote><h1>Problem Example</h1><p>The following code produces a data analysis based on a financial index. Because the code does not validate its input, the application is vulnerable to SQL injection.</p><blockquote><pre>import java.io.*;<br>import java.util.*;<br>import java.lang.*;<br>import javax.servlet.*;<br>import javax.servlet.http.*;<br>import java.util.regex.*;<br> public final class DataAggregator extends HttpServlet<br>{<br>      public void doGet(HttpServletRequest request, HttpServletResponse response)<br>            throws ServletException, IOException<br>      {<br>            PrintWriter out = response.getWriter();<br>            String searchTerm = request.getParameter("index");<br>             String retString;<br>             try<br>            {<br>                  // The application does not validate the user-supplied data<br>                  retString = "The queried index \"";<br>                  retString += encodeHtml(searchTerm);<br>                  retString += "\" produced the following results:&lt;br&gt; ";<br>                  out.println(retString);<br>                  common.aggregateData(out, searchTerm);<br>            }<br>             catch (Exception e)<br>            {<br>                  // Add the appropriate logging and exception handling<br>                  // mechanisms. Consult the Exception Handling and<br>                  // Logging sections<br>                  out.println("We cannot handle your request at the moment."<br>                           + " Please try again later.");<br>            }<br>             out.flush();<br>            out.close();<br>      }<br>  }</pre></blockquote><h1>Additional Resources</h1><ul><li>A tutorial on regular expressions is available at <a href="http://www.regular-expressions.info/">Regular-Expressions.info</a>. </li><li>For more information on using regular expression in Java, see: Documentation for <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">Class Pattern</a> in Java SDK. </li></ul><h1>Related Guideline</h1><ul><li><a href="DA8CCFC9-F04F-4913-B05E-F574D3E4A559">Guideline: Validate Input for Length, Range, Format, and Type (Java Web Application)</a> </li></ul>]]></Data>
  </Content>
</TeamMentor_Article>