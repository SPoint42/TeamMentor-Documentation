<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="334592345" Content_Hash="1495054787">
  <Metadata>
    <Id>31a7325f-96da-4736-aeca-95556d9f3efe</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>Role-based Security Checks Are Performed</Title>
    <Category>Authorization</Category>
    <Phase>Design</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1><p>Ensure that all users are assigned to specific roles. Verify that all access controls are performed on a per-role basis rather than a per-user basis.</p><h1>Why</h1><p>Application roles allow multiple users to play the same role. This mechanism provides an easy and clear way to discover and manage the least privileges necessary for the execution of a given task. It provides a more robust and flexible way of managing the application's users.</p><h1>How to Check</h1><p>Use the following steps to determine if your application uses role-based access controls:</p><ol><li><p><strong>Check if your application uses user roles. </strong>Verify that your application has established user roles and grants the appropriate access privileges to each user role. Example:</p><pre>Roles      Actions    Access Controls    Client Accounts<br>--------------------------------------------------------<br>Manager    Connect        Always            Always<br>           Read           Always            Always<br>           Use            Always            Occasionally<br>           Modify         Never             Occasionally<br>Employee   Connect        Always            Always<br>           Read           Always            Always<br>           Use            Always            Always<br>           Modify         Never             Never</pre></li><li><p><strong>Ensure your application enforces role-based security. </strong>Verify that your application maps its access controls to the established user roles. Depending on your application's design, there are several ways of checking whether your application enforces role-based security:</p><ul><li><p><strong>Check for programmatical role-based security:</strong> If your application uses programmatic security, verify that JAAS is implemented correctly throughout the code. Use the following steps to ensure that access controls are positioned according to your application's security requirements:</p><ul><li><p><strong>Identify all functionality that requires access controls:</strong> Using your application's design, identify all functionality that requires special privileges. Verify that each protected functionality has a permissions check associated with it. For instance, the following code verifies that the user has permission to connect to the application:</p><blockquote><pre>// The variable subject represents the user's identity an all<br>// security tokens that are associated with it<br>PrivilegedExceptionAction action = new AuthException("AccessApp");<br>Subject.doAsPrivileged(subject, action, null);</pre></blockquote><p>Note that <strong>AuthException</strong> is a custom implementation of the <strong>PrivilegedExceptionAction</strong> interface. See the <a href="6CD5BCAD-590C-4DB0-AC31-9D1F4A9201C9">Consider Using JAAS for Authorization</a> guideline for more details.</p></li><li><p><strong>Verify that all user roles' permissions comply with your application's security requirements:</strong> Examine your application's JAAS policy and verify that each user role is granted only the necessary set of permissions. Example:</p><blockquote><pre>grant Principal application.auth.GroupToken "users"<br>{<br>   permission java.security.SecurityPermission "AccessApp";<br>};</pre></blockquote></li></ul></li><li><p><strong>Check for declarative role-based security:</strong> If your application uses declarative security, examine its deployment descriptor file (e.g. <strong>web.xml</strong>). Verify that access to protected resources is granted according to the application's security requirements.&nbsp;Verify that each <strong>web-resource-collection</strong> element inside the deployment descriptor is associated with the appropriate resource and user roles:</p><ul><li><strong>security-constraint</strong>: Check if all of your application's protected resources are placed within a <strong>security-constraint</strong> element. </li><li><strong>web-resource-collection</strong>: Check if all resources that share mutual access controls are encapsulated by the same <strong>web-resource-collection</strong> element. </li><li><strong>web-resource-name</strong>: Check if all collections of resources are identified by a name. </li><li><strong>url-pattern</strong>: For each collection of resources, verify that all resources are placed in the appropriate <strong>web-resource-collection</strong> elements. </li><li><strong>http-method</strong>: If your application requires access controls only for specific HTTP methods, verify that all of these methods are identified appropriately. </li><li><strong>auth-constraint</strong>: Check if each <strong>web-resource-collection</strong> element has an <strong>auth-constraint</strong> element associated with it. </li><li><strong>role-name</strong>: Verify that all roles are granted access according to your application's security requirements. </li></ul></li></ul></li><li><p><strong>Verify that users are assigned into their appropriate roles. </strong>List all of your application's users. Check if each user is assigned into their appropriate role.</p></li></ol><h1>Problem Example</h1><p>The following segment illustrates a JAAS policy. Because the application does not enforce role-based security, it has a policy entry for each separate user; therefore, changing the users' access rights can be quite difficult as every user needs to be modified.</p><br><blockquote><pre>grant Principal application.auth.UserToken "joe"<br>{<br>   permission java.security.SecurityPermission "AccessApp";<br>};<br>grant Principal application.auth.UserToken "steve"<br>{<br>   permission java.security.SecurityPermission "AccessApp";<br>};<br>grant Principal application.auth.UserToken "julie"<br>{<br>   permission java.security.SecurityPermission "AccessApp";<br>};</pre></blockquote><h1>Related Guideline</h1><ul><li><a href="2A2791FA-47DB-4528-9EEC-03482142AABF">Guideline: Perform Role-Based Security Checks (Java Web Application)</a> </li></ul>]]></Data>
  </Content>
</TeamMentor_Article>