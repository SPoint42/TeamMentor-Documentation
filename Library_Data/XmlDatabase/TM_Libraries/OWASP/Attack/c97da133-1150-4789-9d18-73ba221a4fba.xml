<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-524600873" Content_Hash="-271722634">
  <Metadata>
    <Id>c97da133-1150-4789-9d18-73ba221a4fba</Id>
    <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
    <Title>Command Injection Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Any</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>Applies To</h1>
  <p>All applications.</p>
  <h1>Description</h1>
  <p>Command injection problems are a subset of injection problems in which the process is tricked into either executing code or calling external processes of the attacker's choice through the injection of control information into the data stream.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Elevation of Privilege:</strong> Command injection can allow for the execution of arbitrary commands and code by the attacker. </li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>
      <strong>Failure to Validate User Input:</strong> Situations where control information and data are mixed create opportunities for command injection.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Validate user input</strong>. Prevent commands from being included in data by validating input for type, length, range, and format. Whitelist acceptable input and reject everything else. Escape meta characters and be aware of canonicalization issues. Remember that data may be changed as it flows through the program, so validating at multiple stages is often appropriate. </li>
    <li>
      <strong>Do not use input data in commands directly</strong>. Clever formatting may be used so that the user's input is treated as its own separate command instead of as data. Therefore, validate the input and explicitly type it as data so that it cannot be interpreted as a command even if it contains one. </li>
    <li>
      <strong>Avoid using command interpreters</strong>. Although not always practical, using a well maintained API will have better results than invoking commands through an interpreter or external process.</li>
  </ul>
  <h1>Example</h1>
  <p>The following code is wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable: </p>
  <pre>#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main(int argc, char **argv) {  char cat[] = "cat ";  char *command;  size_t commandLength;  commandLength = strlen(cat) + strlen(argv[1]) + 1;  command = (char *) malloc(commandLength);  strncpy(command, cat, commandLength);  strncat(command, argv[1], (commandLength - strlen(cat)) ); system(command);  return (0);}</pre>
  <p>Used normally, the output is simply the contents of the file requested: </p>
  <pre>$ ./catWrapper Story.txtWhen last we left our heroes...</pre>
  <p>However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint: </p>
  <pre>$ ./catWrapper Story.txt; lsWhen last we left our heroes...Story.txt doubFree.c nullpointer.cunstosig.c www* a.out*format.c strlen.c useFree*catWrapper* misnull.c strlength.c useFree.c commandinjection.c nodefault.c trunc.c writeWhatWhere.c</pre>
  <p>If catWrapper had been set to have a higher privilege level than the standard user or could be executed anonymously, arbitrary commands could be executed with that higher privilege. </p>
  <p>Another example of this type of behavior can be seen with XSL, the style sheet language for XML. The primary purpose of XSL is to provide an easy and modular way to transform XML documents into other XML documents such as HTML. In particular, different XSL styles can be attached to the same XML and are sometimes supplied by the user. Microsoft extended the functionality of XSL to allow scripting code to be embedded in the style sheets with the &lt;msxsl:script&gt; tag. If an attacker has the ability to modify or replace the XSL style sheet in use, they can therefore inject any command to the system running the application simply by including it in the style sheet.</p>
  <p>In many programming languages there is an eval() function that, as the name suggests, evaluates a string as an expression. Among the members of this list are the commonly used JavaScript, ASP, Python, Perl, Ruby, and PHP. Blurring the distinction between data and code presents a huge security risk; this case is no different. User input is sometimes used in eval() expressions allowing arbitrary code to be executed. Consider an example where eval() is used in a php application to join strings:</p>
  <pre>$name; // ask the user for their name and store it here$str = '$user stole my coffee!';$str_after_eval = eval("$str;");echo $str. "\n";echo $str_after_eval. "\n";</pre>
  <p>If the user enters the name "Alice", this code will output the following:</p>
  <pre>$user stole my coffee!Alice stole my coffee!</pre>
  <p>However, if the user enters the name "echo exec('whoami'); echo" then the application will return the name of the system user running the php/html application. Any system command or external program in the path could be run in this fashion.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on Command Injection, see the <a href="http://www.e-articles.info/e/a/title/Command-Injection/">Command Injection </a>article at e-articles.info. </li>
    <li>For more information on the Javascript Eval function, see the Wikipedia Eval article at <a href="http://en.wikipedia.org/wiki/Eval">http://en.wikipedia.org/wiki/Eval</a>. </li>
    <li>For more information on script blocks in XSL, see <a href=" http://msdn2.microsoft.com/en-us/library/wxaw5z5e.aspx">Script Blocks Using msxsl:script </a>on MSDN. </li>
    <li>For more information on XSL transformations, see <a href="http://en.wikipedia.org/wiki/XSL_Transformations">XSL Transformations</a> on wikipedia. </li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="C7AC7D00-4AEA-4AFA-AD2D-1E812664BA38">Attack: Canonicalization Attack</a>
    </li>
    <li>
      <a href="8515588C-661A-4962-853F-6CD6ABCD8CF6">Attack: Server-Side Code Injection Attack</a>
    </li>
    <li>
      <a href="/article/4e2f567c-e829-4710-9e2d-861757fb1854">Attack: SQL Injection Attack</a>
    </li>
    <li>
      <a href="/article/73777936-5891-48b0-a3e8-71663e3429a1">Attack: XML Injection Attack</a>
    </li>
    <li>
      <a href="/article/dfdb2801-2abe-44d3-93ff-9f6254197978">Attack: Xpath-XQuery Attack</a>
    </li>
    <li>
      <a href="044B9F0A-6A95-442C-BF24-3F890D0B10EF">Attack: Client-side Validation Attack</a>
    </li>
    <li>
      <a href="/article/ec178496-024d-4b3c-8381-8db94767e539">Attack: Cross Site Scripting Attack</a>
    </li>
    <li>
      <a href="/article/16c073b9-e951-4f25-a282-e867d2d808f7">Attack: AJAX Injection Attack</a>
    </li>
    <li>
      <a href="092BC54D-5A7F-451F-9EB1-AB0A1F1708C0">Attack: LDAP Injection Attack</a>
    </li>
    <li>
      <a href="48BB4D3A-9295-4263-B3E7-090E483DEC5D">Attack: Man in the Middle Attack</a>
    </li>
    <li>
      <a href="/article/320f3578-7231-41d3-be4b-db79957bd496">Guideline: Do Not Rely on Request Validation </a>
    </li>
    <li>
      <a href="/article/21a9dbc2-dc93-46ea-b8a6-61e8398940c6">Guideline: Validate All Data Passed Between Native and Java Code </a>
    </li>
    <li>
      <a href="/article/e2762d56-fcc1-4677-b955-d97fdce23646">Guideline: Filter All User-Supplied Filename and Path Input </a>
    </li>
    <li>
      <a href="/article/ae57fb40-a7ab-428e-9ed1-6624d4ae8181">Guideline: Validate Input from All Sources </a>
    </li>
    <li>
      <a href="/article/75bd5893-aa69-4d39-8cc8-004cee54aaae">Guideline: Validate Input for Length, Range, Format, and Type </a>
    </li>
    <li>
      <a href="/article/280d4fb4-9004-4304-8d93-a41b583f86cf">Guideline: Do Not Rely on Client-Side Validation </a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>