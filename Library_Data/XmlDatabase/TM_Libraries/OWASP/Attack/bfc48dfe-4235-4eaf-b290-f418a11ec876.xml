<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-745112012" Content_Hash="-943817372">
  <Metadata>
    <Id>bfc48dfe-4235-4eaf-b290-f418a11ec876</Id>
    <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
    <Title>URL Redirection Attack</Title>
    <Category>Session Management</Category>
    <Phase>Any</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <ul>
    <li>Web Applications</li>
  </ul>
  <h1>Description</h1>
  <p>Many web applications use URL redirection as a feature to direct a user to another site or page on the same site. An attacker may be able to leverage this vulnerability to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Website forgery</strong>: If an attacker can redirect a user from one trusted site to another site, the victim may not notice the redirection and extend trust to a malicious web site.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Improper use of redirection. </li>
    <li>Failure to properly alert the user when a redirection is about to occur.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>Never allow silent redirects to a user specified URL, even if the hostname is fixed.</li>
  </ul>
  <h1>Example</h1>
  <p>The login page for a web application has a feature that redirects the user, with a full query string, to a specified page within the site after the user logs in. This is used to allow pages to force the user to login before they are accessed, without losing track of the page the user was attempting to load. Unfortunately, this application also has pages, which alter the application state with a single get request. This combination allows an attacker to craft a single URL which will ask the user for their credentials on the legitimate login page, and subsequently perform some action as that user, without the user's knowledge. In order to fix this, the redirect links should be signed by the application in some way and protected against replay, thus guaranteeing that only legitimate uses of the feature will occur. Additionally, redirect strings should be passed as POST variables thus preventing attackers from crafting links that look like they are part of the legitimate site.</p>
  <p>In another example, a page has a utility function which allows developers to construct transparent redirects to other sites. This allows a phishing group to construct a seemingly legitimate URL on the application site which redirects silently to a malicious site. They can then pass this URL out to unsuspecting users, who can be tricked into visiting the malicious site while believing they're using the legitimate one.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://seclists.org/webappsec/2006/q1/0066.html">http://seclists.org/webappsec/2006/q1/0066.html</a>
    </li>
    <li>
      <a href="http://www.pc-help.org/obscure.htm">http://www.pc-help.org/obscure.htm</a>
    </li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/9b3fc217-8a85-4d4d-8e13-3a0963be6703">Attack: Phishing Attack</a>
    </li>
    <li>
      <a href="FC3DFE32-7252-4AB2-A92B-2C7A77D67253">Attack: Request Smuggling Attack</a>
    </li>
    <li>
      <a href="2B17E816-C6C4-4B05-BE92-01DC71073F66">Attack: Response Splitting Attack</a>
    </li>
    <li>
      <a href="2288423A-5696-41EA-A421-05EAD6460E4C">Attack: Cross Site Request Forgery</a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>