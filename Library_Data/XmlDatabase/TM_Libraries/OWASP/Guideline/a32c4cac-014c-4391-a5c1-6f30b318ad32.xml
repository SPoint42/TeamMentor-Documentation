<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="983035931" Content_Hash="-754696710">
  <Metadata>
    <Id>a32c4cac-014c-4391-a5c1-6f30b318ad32</Id>
    <Library_Id>00000000-0000-0000-0000-000000000000</Library_Id>
    <Title>Store JSESSIONIDs in the URL When Cookies Are Disabled</Title>
    <Category>Session Management</Category>
    <Phase>Design</Phase>
    <Technology>Java</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1><ul><li>Applications written using Servlets or JSP.</li></ul><h1>What to Do</h1><p>Store the <strong>JSESSIONIDs</strong> inside the URL when cookies are disabled by the browser.</p><h1>Why</h1><p><strong>JSESSIONIDs</strong> are the identifiers that match a client to a session. The use of truly random <strong>JSESSIONID</strong> makes it difficult for an attacker to hijack the session and impersonate a user.</p><h1>When</h1><p>If your application supports authentication but cannot use cookies.</p><h1>How</h1><p>The only information that the browser needs to know once a session has been created for a user is its ID (i.e. <strong>JSESSIONID</strong>). <strong>JSESSIONIDs</strong> should be stored inside cookies. However, <strong>JSESSIONIDs</strong> can be stored inside the URL if cookies are disabled. To use <strong>JSESSIONIDs</strong> properly:</p><ol><li><p><strong>Check if cookies are accepted. </strong>Verify whether the client has enabled cookies. Store <strong>JSESSIONIDs</strong> in cookies if possible; however, if cookies are not enabled, Java allows session IDs to be passed in the URL.</p></li><li><p><strong>Pass the session ID to the client. </strong>Use one of the following approaches when passing the <strong>JSESSIONID</strong> to the client:</p><ul><li><p><strong>Cookies</strong>: Cookies are the preferred way of passing <strong>JSESSIONID</strong> to the browser. The cookie should store only the session identifier and nothing more. All other data should reside inside the server-side session.</p><blockquote><pre>HttpSession session = request.getSession(true);Subject subject = auth.getSubject();session.setAttribute("AuthUser", subject);</pre></blockquote></li><li><p><strong>URL</strong>: <strong>JSESSIONIDs</strong> can also be stored in URLs. This should be a back-up approach that is executed only when cookies are disabled. Adding the session identifier into a URL is done through <strong>HttpServletResponse.encodeUrl</strong>.</p><blockquote><pre>String url = request.getRequestURL().toString();url = response.encodeURL(url);response.sendRedirect(url);</pre></blockquote><p>However, be exceptionally careful when linking to external sites. Because of the HTTP Referer header, the <strong>JSESSIONID</strong> can leak out when following a link to an external site. This issue can be mitigated by setting up a forward page where <strong>JSESSIONIDs</strong> are stripped from the URL and the user is forwarded to the external site.</p></li></ul></li></ol><h1>Problem Example</h1><p>The following code shows the login interaction between the application and the user. Once the user requests the initial page, the application forwards him to the login screen. Upon verifying the credentials, the application loads the main application interface. Unfortunately, the application does not check whether the client supports cookies which causes&nbsp;a broken access control, and&nbsp;the valid user may not be able to access the application.</p><blockquote><pre>&lt;%-- Filename: /myapp/index.jsp --%&gt;<br>&lt;%-- The application fails to check whether the client supports cookies --%&gt;<br>&lt;jsp:forward page="/myapp/login.jsp" /&gt;<br>  <br>&lt;%-- Filename: /myapp/login.jsp --%&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;::login&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;form method="POST" action="https://login.example.com/myapp/auth"&gt;<br>    &lt;input type="text" name="user" size="20"&gt;<br>    &lt;br&gt;&lt;input type="password" name="pass" size="20"&gt;<br>    &lt;br&gt;&lt;input type="submit" value="log in"&gt;&lt;/form&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br>  /*  Filename: /myapp/auth  */<br>import java.io.*;<br>import java.util.*;<br>import javax.servlet.*;<br>import javax.servlet.http.*;<br> <br>public final class Auth extends HttpServlet{<br>      public void doGet(HttpServletRequest request,<br>              HttpServletResponse response) throws ServletException, IOException<br>      {<br>            HttpSession session = request.getSession(true);<br>            String redirectURL = "/myapp/main";<br> <br>            //The application fails to check whether the client supports cookies<br>            ...<br> <br>            response.sendRedirect(redirectURL);<br>      }<br>}</pre></blockquote><h1>Solution Example</h1><p>The following code shows the login interaction between the application and the user. Once the user requests the initial page, the application forwards him to the login screen. Upon verifying the credentials, the application loads the main application interface. Fortunately, the application checks whether the client supports cookies; therefore, any user with disabled&nbsp;cookies will still be able to use the application. </p><blockquote><pre>&lt;%-- Filename: /myapp/index.jsp --%&gt;<br>&lt;%<br>// The application initiates a test that determines<br> <br>// whether cookies are enabledCookie<br> <br>testCookie = new Cookie(""myappTestCookie", "testVal");<br>testCookie.setMaxAge(300);<br>response.addCookie(testCookie);%&gt;<br>&lt;jsp:forward page="/myapp/login.jsp" /&gt;<br> <br> <br>&lt;%-- Filename: /myapp/login.jsp --%&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;::login&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;form method="POST" action="https://login.example.com/myapp/auth"&gt;<br>    &lt;input type="text" name="user" size="20"&gt;<br>    &lt;br&gt;&lt;input type="password" name="pass" size="20"&gt;<br>    &lt;br&gt;&lt;input type="submit" value="log in"&gt;&lt;/form&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br> <br> <br>/*  Filename: /myapp/auth  */<br>import java.io.*;<br>import java.util.*;<br>import javax.servlet.*;<br>import javax.servlet.http.*;<br> <br>public final class Auth extends HttpServlet{<br>      public void doGet(HttpServletRequest request,<br>              HttpServletResponse response) throws ServletException, IOException<br>      {<br>            HttpSession session = request.getSession(true);<br>            Cookie[] cookies = request.getCookies();<br>            String redirectURL = "/myapp/main";<br>            boolean cookiesSupported = true;<br> <br>            ...<br> <br>            // The application checks if the test cookie is accepted by the client<br>            if (cookies.length &lt; 1)<br>            {<br>                  cookiesSupported = false;<br>            }<br> <br>            ...<br> <br>            if (!cookiesSupported)<br>            {<br>                  redirectURL = response.encodeURL(redirectURL);<br>            }<br> <br>            response.sendRedirect(redirectURL);<br>      }<br>}</pre></blockquote><h1>Additional Resources</h1><ul><li>For more information on HTTP sessions, see: Documentation for <a href="http://download.oracle.com/javaee/1.3/api/javax/servlet/http/HttpSession.html">Interface HttpSession</a> in Java SDK. </li><li>For more information on HTTP cookies, see: Documentation for <a href="http://download.oracle.com/javaee/1.3/api/javax/servlet/http/Cookie.html">Class Cookie</a> in Java SDK. </li><li>For more information on HTTP responses, see: Documentation for <a href="http://download.oracle.com/javaee/1.3/api/javax/servlet/http/HttpServletResponse.html">Interface HttpServletResponse</a> in Java SDK. </li><li>To learn more about session management, see: <a href="http://www.securityfocus.com/infocus/1774">Basic Web Session Impersonation</a>. </li><li>To learn more about session prediction attacks, see: <a href="http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml">Credential and Session Prediction</a>.</li></ul><h1>Related Items</h1><ul><li><a href="33D22944-96D4-4711-AE97-BD87A87463C9">Guideline: Do Not Place Sensitive Data in Parameters (Java Web Application)</a> </li><li><a href="3EB8979E-59F0-4C2B-8D8A-CFB173E5D66B">Attack: HTTP Session Hijacking Attack</a> </li><li><a href="74F3AE96-F7AD-45A2-B8DE-008D23234123">Checklist Item: JSESSIONIDs are Stored in the URL When Cookies are Disabled (Java Web Application)</a> </li></ul>]]></Data>
  </Content>
</TeamMentor_Article>